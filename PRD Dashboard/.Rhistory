CareerMAP<-inputs$CareerMAP
APPLY_SNAP<-inputs$APPLY_SNAP
APPLY_SLP<-inputs$APPLY_SLP
APPLY_WIC<-inputs$APPLY_WIC
APPLY_EITC<-inputs$APPLY_EITC
APPLY_TAXES<-inputs$APPLY_TAXES
APPLY_CTC<-inputs$APPLY_CTC
APPLY_CDCTC<-inputs$APPLY_CDCTC
APPLY_FATES<-inputs$APPLY_FATES
APPLY_TANF<-inputs$APPLY_TANF
APPLY_SSI<-inputs$APPLY_SSI
APPLY_SSDI<-inputs$APPLY_SSDI
# table.countypop<-table.countypop %>%
#   filter(!stcountyfips2010  %in% c("9_110", "9_140", "9_150" ,"9_160" ,"9_170", "9_190", "9_180" ,"9_120", "9_130"))
# table.countypop<-table.countypop %>%
#   filter(!stcountyfips2010  %in% c("9_1", "9_3", "9_5" ,"9_7" ,"9_9", "9_11", "9_13" ,"9_15"))
## 2. Create data from inputs----
data<-function.createData(inputs)
## 3. Attach ALICE expenses----
data<-BenefitsCalculator.ALICEExpenses(data)
# Check that all expenses merged on properly. only counties that do not exist anymore should be missing if using "all" counties. See \Data.ALICE\documentation from Max\MasterCountyCheck-All counties need.xlsx
# length(data$exp.childcare[is.na(data$exp.childcare)])
# length(data$exp.childcare[is.na(data$exp.rentormortgage)])
# length(data$exp.childcare[is.na(data$exp.transportation)])
# length(data$exp.childcare[is.na(data$exp.food)])
# length(data$exp.childcare[is.na(data$exp.utilities)])
# length(data$exp.childcare[is.na(data$exp.misc)])
# missingData<-data[is.na(data$exp.utilities), ]
# view(missingData)
## 4. Apply Benefits Calculator (block-by-block)----
# Apply other benefits block
data<-BenefitsCalculator.OtherBenefits(data, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
#data <- data[data$statefip != 3, ]
# Apply child care block
data<-BenefitsCalculator.Childcare(data, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF, APPLY_FATES, contelig.ccdf, contelig.headstart, contelig.earlyheadstart)
# Apply public health insurance block
data<-BenefitsCalculator.Healthcare(data, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block #
data<-BenefitsCalculator.FoodandHousing(data,APPLY_SECTION8=F, APPLY_LIHEAP=F, APPLY_SNAP, APPLY_SLP=F, APPLY_WIC, APPLY_RAP=F, APPLY_FRSP=T) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
data<-BenefitsCalculator.TaxesandTaxCredits(data, APPLY_EITC, APPLY_CTC, APPLY_CDCTC, APPLY_TAXES)
# Generate Additional Variables
data<-function.createVars(data)
## 5. Select variables of interest and save results----
data2<-data %>%
select(ruleYear, stateFIPS, stateName, stateAbbrev, countyortownName, famsize, numadults, numkids
, agePerson1, agePerson2, agePerson3, agePerson4, agePerson5, agePerson6, agePerson7, agePerson8, agePerson9, agePerson10, agePerson11, agePerson12,empl_healthcare
, income, assets.cash
, exp.childcare, exp.food, exp.rentormortgage, exp.healthcare, exp.utilities, exp.misc, exp.transportation
, netexp.childcare, netexp.food, netexp.rentormortgage, netexp.healthcare, netexp.utilities
, tax.income.fed, tax.income.state, tax.FICA
, value.snap, value.wic, value.schoolmeals, value.section8, value.liheap
, value.medicaid.adult, value.medicaid.child, value.aca, value.employerhealthcare
, value.CCDF, value.HeadStart, value.PreK
, value.cdctc.fed, value.cdctc.state, value.ctc.fed, value.ctc.state, value.eitc.fed, value.eitc.state
, value.eitc, value.ctc, value.cdctc, value.ssdi, value.ssi, value.tanf
, AfterTaxIncome, NetResources)
data_SMI <- data
write.csv(data_SMI, file = paste0(current_directory,"/output/results_data_SMI.csv"), row.names = FALSE)
# if(PROJECT=="UW_SIMULATIONS_EITC"){
#
#   data2<-data %>%
#
#     select(numadults, numkids, income, tax.income.fed, tax.income.state, tax.FICA, tax.sales
#            , exp.rentormortgage, exp.utilities, netexp.childcare, total.expenses
#            , value.snap, value.medicaid, value.section8, value.CCDF, value.eitc.fed, value.ctc.fed, value.eitc.state, value.ctc.state)
#
#   write.csv(data2, file = paste0(current_directory,"/output/results_",PROJECT, ".csv"), row.names = FALSE)
#
# }
data$value.CCDF
data$value.tanf
# This program reads-in input data and runs Benefits Calculator
# PREAMBLE----
rm(list=ls())
## Setting your working directory----
current_directory<-getwd()
## Load expense parameters ----
load(paste0(current_directory,"/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(current_directory,"/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(current_directory,"/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(current_directory,"/prd_parameters/parameters.defaults.rdata"))
## Call all the functions----
source(paste0(current_directory,"/libraries.R"), local=TRUE) # Load required packages
source(paste0(current_directory,"/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(current_directory,"/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(current_directory,"/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
source(paste0(current_directory,"/functions/TANF.R"), local=TRUE) # TANF code
source(paste0(current_directory,"/functions/CCDF.R"), local=TRUE) # CCDF code
# SPECIFY PROJECT----
PROJECT<-"TEST"
source()
inputs <- read_yaml(paste0(current_directory,"/projects/",PROJECT,".yml"))
current_directory
setwd("\\rb.win.frb.org\F1\Accounts\S-T\f1dat01\My Documents\GitHub\policy-rules-database")
setwd("//rb.win.frb.org/F1/Accounts/S-T/f1dat01/My Documents/GitHub/policy-rules-database")
current_directory
current_directory<-setwd("//rb.win.frb.org/F1/Accounts/S-T/f1dat01/My Documents/GitHub/policy-rules-database")
current_directory
# This program reads-in input data and runs Benefits Calculator
# PREAMBLE----
rm(list=ls())
current_directory<-setwd("//rb.win.frb.org/F1/Accounts/S-T/f1dat01/My Documents/GitHub/policy-rules-database")
load(paste0(current_directory,"/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(current_directory,"/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(current_directory,"/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(current_directory,"/prd_parameters/parameters.defaults.rdata"))
source(paste0(current_directory,"/libraries.R"), local=TRUE) # Load required packages
source(paste0(current_directory,"/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(current_directory,"/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(current_directory,"/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
source(paste0(current_directory,"/functions/TANF.R"), local=TRUE) # TANF code
source(paste0(current_directory,"/functions/CCDF.R"), local=TRUE) # CCDF code
# SPECIFY PROJECT----
PROJECT<-"TEST"
# Load inputs YAML file
inputs <- read_yaml(paste0(current_directory,"/projects/",PROJECT,".yml"))
# Global settings
k_ftorpt <- inputs$k_ftorpt
schoolagesummercare <- inputs$schoolagesummercare
headstart_ftorpt <- inputs$headstart_ftorpt
preK_ftorpt <- inputs$preK_ftorpt
contelig.headstart <- inputs$contelig.headstart
contelig.earlyheadstart <- inputs$contelig.earlyheadstart
contelig.ccdf <- inputs$contelig.ccdf
USEALICE <- inputs$USEALICE
budget.ALICE <-inputs$budget.ALICE
# Transfer programs switches
APPLY_CHILDCARE<-inputs$APPLY_CHILDCARE #Childcare block - Head Start and CCDF
APPLY_CCDF<-inputs$APPLY_CCDF
APPLY_HEADSTART<-inputs$APPLY_HEADSTART
APPLY_PREK<-inputs$APPLY_PREK
APPLY_LIHEAP<-FALSE
APPLY_HEALTHCARE<-inputs$APPLY_HEALTHCARE
APPLY_MEDICAID_ADULT<-inputs$APPLY_MEDICAID_ADULT
APPLY_MEDICAID_CHILD<-inputs$APPLY_MEDICAID_CHILD
APPLY_ACA<-inputs$APPLY_ACA
APPLY_SECTION8<-inputs$APPLY_SECTION8
APPLY_RAP<-inputs$APPLY_RAP
APPLY_FRSP<-inputs$APPLY_FRSP
APPLY_SNAP<-inputs$APPLY_SNAP
APPLY_SLP<-inputs$APPLY_SLP
APPLY_WIC<-inputs$APPLY_WIC
APPLY_EITC<-inputs$APPLY_EITC
APPLY_TAXES<-inputs$APPLY_TAXES
APPLY_CTC<-inputs$APPLY_CTC
APPLY_CDCTC<-inputs$APPLY_CDCTC
APPLY_FATES<-inputs$APPLY_FATES
APPLY_TANF<-inputs$APPLY_TANF
APPLY_SSI<-inputs$APPLY_SSI
APPLY_SSDI<-inputs$APPLY_SSDI
## 2. Create data from inputs----
data<-function.createData(inputs)
## 3. Attach default expenses----
data<-BenefitsCalculator.ALICEExpenses(data)
## 4. Apply Benefits Calculator (block-by-block)----
# Apply other benefits block
data<-BenefitsCalculator.OtherBenefits(data, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
# Apply child care block
data<-BenefitsCalculator.Childcare(data, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF,APPLY_FATES) # OPTION TO END WITH APPLY_FATES
# Apply public health insurance block
data<-BenefitsCalculator.Healthcare(data, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block
data<-BenefitsCalculator.FoodandHousing(data, APPLY_SECTION8, APPLY_LIHEAP, APPLY_SNAP, APPLY_SLP, APPLY_WIC, APPLY_RAP, APPLY_FRSP) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
data<-BenefitsCalculator.TaxesandTaxCredits(data, APPLY_EITC, APPLY_CTC, APPLY_CDCTC)
# Generate Additional Variables
data<-function.createVars(data)
## 5. Select variables of interest and save results----
data2<-data %>%
select(ruleYear, stateFIPS, stateName, stateAbbrev, countyortownName, famsize, numadults, numkids
, agePerson1, agePerson2, agePerson3, agePerson4, agePerson5, agePerson6, agePerson7, agePerson8, agePerson9, agePerson10, agePerson11, agePerson12,empl_healthcare
, income, assets.cash
, exp.childcare, exp.food, exp.rentormortgage, exp.healthcare, exp.utilities, exp.misc, exp.transportation
, netexp.childcare, netexp.food, netexp.rentormortgage, netexp.healthcare, netexp.utilities
, value.snap, value.schoolmeals, value.section8, value.liheap
, value.medicaid.adult, value.medicaid.child, value.aca, value.employerhealthcare
, value.CCDF, value.HeadStart, value.PreK
, value.cdctc.fed, value.cdctc.state, value.ctc.fed, value.ctc.state, value.eitc.fed, value.eitc.state
, value.eitc, value.ctc, value.cdctc, value.ssdi, value.ssi, value.tanf
, AfterTaxIncome, NetResources)
write.csv(data2, file = paste0(current_directory,"/output/results_",PROJECT, ".csv"), row.names = FALSE)
data$value.tanf
data$value.CCDF
runApp('PRD Dashboard')
runApp('PRD Dashboard')
runApp('PRD Dashboard')
runApp('PRD Dashboard')
# This program reads-in input data and runs Benefits Calculator
rm(list=ls())
## Setting your working directory----
#current_directory <- setwd("C:/Users/edgar/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
#current_directory <- setwd("C:/Users/f1exr03/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
current_directory <- setwd("C:/Users/f1dat01/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
#current_directory<-setwd("/Users/danielalejandrotasconbuchelly/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
## Load expense parameters ----
load(paste0(current_directory,"/prd_parameters/expenses.rdata"))
## Load benefits parameters ----
load(paste0(current_directory,"/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(current_directory,"/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(current_directory,"/prd_parameters/parameters.defaults.rdata"))
# verify that everything is loaded in the console
## Call all the functions----
source(paste0(current_directory,"/libraries.R"), local=TRUE) # Load required packages
source(paste0(current_directory,"/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(current_directory,"/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(current_directory,"/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
source(paste0(current_directory,"/functions/TANF.R"), local=TRUE) # TANF code
source(paste0(current_directory,"/functions/CCDF.R"), local=TRUE) # CCDF code
# SPECIFY PROJECT----
PROJECT<-"TEST"
#PROJECT<-"TEST_ALL_LOCATIONS"
## 1. Settings----
# Load inputs YAML file
inputs <- read_yaml(paste0(current_directory,"/projects/",PROJECT,".yml"))
# Global settings
k_ftorpt <- inputs$k_ftorpt
schoolagesummercare <- inputs$schoolagesummercare
headstart_ftorpt <- inputs$headstart_ftorpt
preK_ftorpt <- inputs$preK_ftorpt
contelig.headstart <- inputs$contelig.headstart
contelig.earlyheadstart <- inputs$contelig.earlyheadstart
contelig.ccdf <- inputs$contelig.ccdf
USEALICE <- inputs$USEALICE
budget.ALICE <-inputs$budget.ALICE #!!!NEW - Et ADDED 12/21/22!!!
# Transfer programs switches
APPLY_CHILDCARE<-inputs$APPLY_CHILDCARE #Childcare block - Head Start and CCDF
APPLY_CCDF<-inputs$APPLY_CCDF
APPLY_HEADSTART<-inputs$APPLY_HEADSTART
APPLY_PREK<-inputs$APPLY_PREK
APPLY_LIHEAP<-FALSE  #doesn't work if true
APPLY_HEALTHCARE<-inputs$APPLY_HEALTHCARE
APPLY_MEDICAID_ADULT<-inputs$APPLY_MEDICAID_ADULT
APPLY_MEDICAID_CHILD<-inputs$APPLY_MEDICAID_CHILD
APPLY_ACA<-inputs$APPLY_ACA
APPLY_SECTION8<-inputs$APPLY_SECTION8
APPLY_RAP<-inputs$APPLY_RAP
APPLY_FRSP<-inputs$APPLY_FRSP
CareerMAP<-inputs$CareerMAP
APPLY_SNAP<-inputs$APPLY_SNAP
APPLY_SLP<-inputs$APPLY_SLP
APPLY_WIC<-inputs$APPLY_WIC
APPLY_EITC<-inputs$APPLY_EITC
APPLY_TAXES<-inputs$APPLY_TAXES
APPLY_CTC<-inputs$APPLY_CTC
APPLY_CDCTC<-inputs$APPLY_CDCTC
APPLY_FATES<-inputs$APPLY_FATES
APPLY_TANF<-inputs$APPLY_TANF
APPLY_SSI<-inputs$APPLY_SSI
APPLY_SSDI<-inputs$APPLY_SSDI
# table.countypop<-table.countypop %>%
#   filter(!stcountyfips2010  %in% c("9_110", "9_140", "9_150" ,"9_160" ,"9_170", "9_190", "9_180" ,"9_120", "9_130"))
# table.countypop<-table.countypop %>%
#   filter(!stcountyfips2010  %in% c("9_1", "9_3", "9_5" ,"9_7" ,"9_9", "9_11", "9_13" ,"9_15"))
## 2. Create data from inputs----
data<-function.createData(inputs)
## 3. Attach ALICE expenses----
data<-BenefitsCalculator.ALICEExpenses(data)
# Check that all expenses merged on properly. only counties that do not exist anymore should be missing if using "all" counties. See \Data.ALICE\documentation from Max\MasterCountyCheck-All counties need.xlsx
# length(data$exp.childcare[is.na(data$exp.childcare)])
# length(data$exp.childcare[is.na(data$exp.rentormortgage)])
# length(data$exp.childcare[is.na(data$exp.transportation)])
# length(data$exp.childcare[is.na(data$exp.food)])
# length(data$exp.childcare[is.na(data$exp.utilities)])
# length(data$exp.childcare[is.na(data$exp.misc)])
# missingData<-data[is.na(data$exp.utilities), ]
# view(missingData)
## 4. Apply Benefits Calculator (block-by-block)----
# Apply other benefits block
data<-BenefitsCalculator.OtherBenefits(data, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
#data <- data[data$statefip != 3, ]
# Apply child care block
data<-BenefitsCalculator.Childcare(data, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF, APPLY_FATES, contelig.ccdf, contelig.headstart, contelig.earlyheadstart)
# Apply public health insurance block
data<-BenefitsCalculator.Healthcare(data, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block #
data<-BenefitsCalculator.FoodandHousing(data,APPLY_SECTION8=F, APPLY_LIHEAP=F, APPLY_SNAP, APPLY_SLP=F, APPLY_WIC, APPLY_RAP=F, APPLY_FRSP=T) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
data<-BenefitsCalculator.TaxesandTaxCredits(data, APPLY_EITC, APPLY_CTC, APPLY_CDCTC, APPLY_TAXES)
# Generate Additional Variables
data<-function.createVars(data)
## 5. Select variables of interest and save results----
data2<-data %>%
select(ruleYear, stateFIPS, stateName, stateAbbrev, countyortownName, famsize, numadults, numkids
, agePerson1, agePerson2, agePerson3, agePerson4, agePerson5, agePerson6, agePerson7, agePerson8, agePerson9, agePerson10, agePerson11, agePerson12,empl_healthcare
, income, assets.cash
, exp.childcare, exp.food, exp.rentormortgage, exp.healthcare, exp.utilities, exp.misc, exp.transportation
, netexp.childcare, netexp.food, netexp.rentormortgage, netexp.healthcare, netexp.utilities
, tax.income.fed, tax.income.state, tax.FICA
, value.snap, value.wic, value.schoolmeals, value.section8, value.liheap
, value.medicaid.adult, value.medicaid.child, value.aca, value.employerhealthcare
, value.CCDF, value.HeadStart, value.PreK
, value.cdctc.fed, value.cdctc.state, value.ctc.fed, value.ctc.state, value.eitc.fed, value.eitc.state
, value.eitc, value.ctc, value.cdctc, value.ssdi, value.ssi, value.tanf
, AfterTaxIncome, NetResources)
data_SMI <- data
write.csv(data_SMI, file = paste0(current_directory,"/output/results_data_SMI.csv"), row.names = FALSE)
# This program reads-in input data and runs Benefits Calculator
rm(list=ls())
## Setting your working directory----
#current_directory <- setwd("C:/Users/edgar/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
#current_directory <- setwd("C:/Users/f1exr03/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
current_directory <- setwd("C:/Users/f1dat01/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
#current_directory<-setwd("/Users/danielalejandrotasconbuchelly/Dropbox (ATL FRB)/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs")
## Load expense parameters ----
load(paste0(current_directory,"/prd_parameters/expenses.rdata"))
## Load benefits parameters ----
load(paste0(current_directory,"/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(current_directory,"/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(current_directory,"/prd_parameters/parameters.defaults.rdata"))
# verify that everything is loaded in the console
## Call all the functions----
source(paste0(current_directory,"/libraries.R"), local=TRUE) # Load required packages
source(paste0(current_directory,"/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(current_directory,"/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(current_directory,"/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
source(paste0(current_directory,"/functions/TANF.R"), local=TRUE) # TANF code
source(paste0(current_directory,"/functions/CCDF.R"), local=TRUE) # CCDF code
# SPECIFY PROJECT----
PROJECT<-"TEST"
#PROJECT<-"TEST_ALL_LOCATIONS"
## 1. Settings----
# Load inputs YAML file
inputs <- read_yaml(paste0(current_directory,"/projects/",PROJECT,".yml"))
# Global settings
k_ftorpt <- inputs$k_ftorpt
schoolagesummercare <- inputs$schoolagesummercare
headstart_ftorpt <- inputs$headstart_ftorpt
preK_ftorpt <- inputs$preK_ftorpt
contelig.headstart <- inputs$contelig.headstart
contelig.earlyheadstart <- inputs$contelig.earlyheadstart
contelig.ccdf <- inputs$contelig.ccdf
USEALICE <- inputs$USEALICE
budget.ALICE <-inputs$budget.ALICE #!!!NEW - Et ADDED 12/21/22!!!
# Transfer programs switches
APPLY_CHILDCARE<-inputs$APPLY_CHILDCARE #Childcare block - Head Start and CCDF
APPLY_CCDF<-inputs$APPLY_CCDF
APPLY_HEADSTART<-inputs$APPLY_HEADSTART
APPLY_PREK<-inputs$APPLY_PREK
APPLY_LIHEAP<-FALSE  #doesn't work if true
APPLY_HEALTHCARE<-inputs$APPLY_HEALTHCARE
APPLY_MEDICAID_ADULT<-inputs$APPLY_MEDICAID_ADULT
APPLY_MEDICAID_CHILD<-inputs$APPLY_MEDICAID_CHILD
APPLY_ACA<-inputs$APPLY_ACA
APPLY_SECTION8<-inputs$APPLY_SECTION8
APPLY_RAP<-inputs$APPLY_RAP
APPLY_FRSP<-inputs$APPLY_FRSP
CareerMAP<-inputs$CareerMAP
APPLY_SNAP<-inputs$APPLY_SNAP
APPLY_SLP<-inputs$APPLY_SLP
APPLY_WIC<-inputs$APPLY_WIC
APPLY_EITC<-inputs$APPLY_EITC
APPLY_TAXES<-inputs$APPLY_TAXES
APPLY_CTC<-inputs$APPLY_CTC
APPLY_CDCTC<-inputs$APPLY_CDCTC
APPLY_FATES<-inputs$APPLY_FATES
APPLY_TANF<-inputs$APPLY_TANF
APPLY_SSI<-inputs$APPLY_SSI
APPLY_SSDI<-inputs$APPLY_SSDI
# table.countypop<-table.countypop %>%
#   filter(!stcountyfips2010  %in% c("9_110", "9_140", "9_150" ,"9_160" ,"9_170", "9_190", "9_180" ,"9_120", "9_130"))
# table.countypop<-table.countypop %>%
#   filter(!stcountyfips2010  %in% c("9_1", "9_3", "9_5" ,"9_7" ,"9_9", "9_11", "9_13" ,"9_15"))
## 2. Create data from inputs----
data<-function.createData(inputs)
## 3. Attach ALICE expenses----
data<-BenefitsCalculator.ALICEExpenses(data)
# Check that all expenses merged on properly. only counties that do not exist anymore should be missing if using "all" counties. See \Data.ALICE\documentation from Max\MasterCountyCheck-All counties need.xlsx
# length(data$exp.childcare[is.na(data$exp.childcare)])
# length(data$exp.childcare[is.na(data$exp.rentormortgage)])
# length(data$exp.childcare[is.na(data$exp.transportation)])
# length(data$exp.childcare[is.na(data$exp.food)])
# length(data$exp.childcare[is.na(data$exp.utilities)])
# length(data$exp.childcare[is.na(data$exp.misc)])
# missingData<-data[is.na(data$exp.utilities), ]
# view(missingData)
## 4. Apply Benefits Calculator (block-by-block)----
# Apply other benefits block
data<-BenefitsCalculator.OtherBenefits(data, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
#data <- data[data$statefip != 3, ]
# Apply child care block
data<-BenefitsCalculator.Childcare(data, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF, APPLY_FATES, contelig.ccdf, contelig.headstart, contelig.earlyheadstart)
# Apply public health insurance block
data<-BenefitsCalculator.Healthcare(data, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block #
data<-BenefitsCalculator.FoodandHousing(data,APPLY_SECTION8=F, APPLY_LIHEAP=F, APPLY_SNAP, APPLY_SLP=F, APPLY_WIC, APPLY_RAP=F, APPLY_FRSP=T) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
data<-BenefitsCalculator.TaxesandTaxCredits(data, APPLY_EITC, APPLY_CTC, APPLY_CDCTC, APPLY_TAXES)
# Generate Additional Variables
data<-function.createVars(data)
## 5. Select variables of interest and save results----
data2<-data %>%
select(ruleYear, stateFIPS, stateName, stateAbbrev, countyortownName, famsize, numadults, numkids
, agePerson1, agePerson2, agePerson3, agePerson4, agePerson5, agePerson6, agePerson7, agePerson8, agePerson9, agePerson10, agePerson11, agePerson12,empl_healthcare
, income, assets.cash
, exp.childcare, exp.food, exp.rentormortgage, exp.healthcare, exp.utilities, exp.misc, exp.transportation
, netexp.childcare, netexp.food, netexp.rentormortgage, netexp.healthcare, netexp.utilities
, tax.income.fed, tax.income.state, tax.FICA
, value.snap, value.wic, value.schoolmeals, value.section8, value.liheap
, value.medicaid.adult, value.medicaid.child, value.aca, value.employerhealthcare
, value.CCDF, value.HeadStart, value.PreK
, value.cdctc.fed, value.cdctc.state, value.ctc.fed, value.ctc.state, value.eitc.fed, value.eitc.state
, value.eitc, value.ctc, value.cdctc, value.ssdi, value.ssi, value.tanf
, AfterTaxIncome, NetResources)
data_SMI <- data
write.csv(data_SMI, file = paste0(current_directory,"/output/results_data_SMI.csv"), row.names = FALSE)
data$value.tanf
data$value.ccdf
data$value.tanf
data$value.CCDF
current_directory
current_directory<-setwd("//rb.win.frb.org/F1/Accounts/S-T/f1dat01/My Documents/GitHub/policy-rules-database")
rm(list=ls())
current_directory<-getwd()
current_directory
## Load expense parameters ----
load(paste0(current_directory,"/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(current_directory,"/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(current_directory,"/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(current_directory,"/prd_parameters/parameters.defaults.rdata"))
# verify that everything is loaded in the console
## Call all the functions----
source(paste0(current_directory,"/libraries.R"), local=TRUE) # Load required packages
source(paste0(current_directory,"/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(current_directory,"/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(current_directory,"/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
source(paste0(current_directory,"/functions/TANF.R"), local=TRUE) # TANF code
source(paste0(current_directory,"/functions/CCDF.R"), local=TRUE) # CCDF code
# SPECIFY PROJECT----
PROJECT<-"TEST"
## 1. Settings----
# Load inputs YAML file
inputs <- read_yaml(paste0(current_directory,"/projects/",PROJECT,".yml"))
# Global settings
k_ftorpt <- inputs$k_ftorpt
schoolagesummercare <- inputs$schoolagesummercare
headstart_ftorpt <- inputs$headstart_ftorpt
preK_ftorpt <- inputs$preK_ftorpt
contelig.headstart <- inputs$contelig.headstart
contelig.earlyheadstart <- inputs$contelig.earlyheadstart
contelig.ccdf <- inputs$contelig.ccdf
USEALICE <- inputs$USEALICE
budget.ALICE <-inputs$budget.ALICE
# Transfer programs switches
APPLY_CHILDCARE<-inputs$APPLY_CHILDCARE #Childcare block - Head Start and CCDF
APPLY_CCDF<-inputs$APPLY_CCDF
APPLY_HEADSTART<-inputs$APPLY_HEADSTART
APPLY_PREK<-inputs$APPLY_PREK
APPLY_LIHEAP<-FALSE
APPLY_HEALTHCARE<-inputs$APPLY_HEALTHCARE
APPLY_MEDICAID_ADULT<-inputs$APPLY_MEDICAID_ADULT
APPLY_MEDICAID_CHILD<-inputs$APPLY_MEDICAID_CHILD
APPLY_ACA<-inputs$APPLY_ACA
APPLY_SECTION8<-inputs$APPLY_SECTION8
APPLY_RAP<-inputs$APPLY_RAP
APPLY_FRSP<-inputs$APPLY_FRSP
APPLY_SNAP<-inputs$APPLY_SNAP
APPLY_SLP<-inputs$APPLY_SLP
APPLY_WIC<-inputs$APPLY_WIC
APPLY_EITC<-inputs$APPLY_EITC
APPLY_TAXES<-inputs$APPLY_TAXES
APPLY_CTC<-inputs$APPLY_CTC
APPLY_CDCTC<-inputs$APPLY_CDCTC
APPLY_FATES<-inputs$APPLY_FATES
APPLY_TANF<-inputs$APPLY_TANF
APPLY_SSI<-inputs$APPLY_SSI
APPLY_SSDI<-inputs$APPLY_SSDI
## 2. Create data from inputs----
data<-function.createData(inputs)
## 3. Attach default expenses----
data<-BenefitsCalculator.ALICEExpenses(data)
## 4. Apply Benefits Calculator (block-by-block)----
# Apply other benefits block
data<-BenefitsCalculator.OtherBenefits(data, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
# Apply child care block
data<-BenefitsCalculator.Childcare(data, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF,APPLY_FATES) # OPTION TO END WITH APPLY_FATES
# Apply public health insurance block
data<-BenefitsCalculator.Healthcare(data, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block
data<-BenefitsCalculator.FoodandHousing(data, APPLY_SECTION8, APPLY_LIHEAP, APPLY_SNAP, APPLY_SLP, APPLY_WIC, APPLY_RAP, APPLY_FRSP) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
data<-BenefitsCalculator.TaxesandTaxCredits(data, APPLY_EITC, APPLY_CTC, APPLY_CDCTC)
# Generate Additional Variables
data<-function.createVars(data)
## 5. Select variables of interest and save results----
data2<-data %>%
select(ruleYear, stateFIPS, stateName, stateAbbrev, countyortownName, famsize, numadults, numkids
, agePerson1, agePerson2, agePerson3, agePerson4, agePerson5, agePerson6, agePerson7, agePerson8, agePerson9, agePerson10, agePerson11, agePerson12,empl_healthcare
, income, assets.cash
, exp.childcare, exp.food, exp.rentormortgage, exp.healthcare, exp.utilities, exp.misc, exp.transportation
, netexp.childcare, netexp.food, netexp.rentormortgage, netexp.healthcare, netexp.utilities
, value.snap, value.schoolmeals, value.section8, value.liheap
, value.medicaid.adult, value.medicaid.child, value.aca, value.employerhealthcare
, value.CCDF, value.HeadStart, value.PreK
, value.cdctc.fed, value.cdctc.state, value.ctc.fed, value.ctc.state, value.eitc.fed, value.eitc.state
, value.eitc, value.ctc, value.cdctc, value.ssdi, value.ssi, value.tanf
, AfterTaxIncome, NetResources)
write.csv(data2, file = paste0(current_directory,"/output/results_",PROJECT, ".csv"), row.names = FALSE)
runApp('PRD Dashboard')
